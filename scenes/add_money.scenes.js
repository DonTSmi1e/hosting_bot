const { Scenes } = require('telegraf');

const User = require('../models/user.models')

const admin_keyboard = require('../keyboards/admin.keyboards');

module.exports = new Scenes.WizardScene(
    'add_money',
    async (ctx) => {
        await ctx.answerCbQuery();

        const user = await User.findOne({ where: { tid: ctx.from.id } });
        if (!user || user.role == 0) { return ctx.scene.leave(); }

        await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return ctx.wizard.next();
    },
    async (ctx) => {
        ctx.wizard.state.user = await User.findOne({ where: { tid: ctx.message.text } });
        if (!ctx.wizard.state.user) {
            await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', admin_keyboard);
            return ctx.scene.leave();
        }

        await ctx.reply('–°–∫–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å?');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (isNaN(ctx.message.text)) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ', admin_keyboard);
            return ctx.scene.leave();
        }

        ctx.wizard.state.user.balance += parseInt(ctx.message.text);
        await ctx.wizard.state.user.save();

        await ctx.sendMessage(`üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ ${ctx.message.text} —Ä—É–±–ª–µ–π.`, {
            chat_id: ctx.wizard.state.user.tid
        });

        await ctx.reply('–ì–æ—Ç–æ–≤–æ', admin_keyboard);
        return ctx.scene.leave();
    }
);
